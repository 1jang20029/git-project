
// Ï†ÑÏó≠ Î≥ÄÏàò
let currentRoute = 1;
let gpsConnected = true;
let satelliteCount = 12;
let updateInterval;

// GPS ÏúÑÏÑ± Ï∂îÏ†Å ÏãúÏä§ÌÖú ÌÅ¥ÎûòÏä§
class SatelliteShuttleTracker {
    constructor() {
        // Ïã§Ï†ú Ïó∞ÏÑ±ÎåÄÌïôÍµê ÏÖîÌãÄÎ≤ÑÏä§ Ïö¥ÌñâÏãúÍ∞ÑÌëú
        this.schedules = {
            1: { // ÎÖ∏ÏÑ† 1 (ÏïàÏñëÏó≠)
                Ïö¥ÌñâÍµ¨Í∞Ñ: [
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§Ï†Ñ", Ï∂úÏ∞®: "08:30", ÎßâÏ∞®: "10:50", Î∞∞Ï∞®Í∞ÑÍ≤©: 6 },
                    { ÏãúÍ∞ÑÎåÄ: "ÎÇÆ", Ï∂úÏ∞®: "12:00", ÎßâÏ∞®: "13:20", Î∞∞Ï∞®Í∞ÑÍ≤©: 10 },
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§ÌõÑ", Ï∂úÏ∞®: "16:55", ÎßâÏ∞®: "17:45", Î∞∞Ï∞®Í∞ÑÍ≤©: [5, 10, 15] }
                ]
            },
            2: { // ÎÖ∏ÏÑ† 2 (ÌèâÏ¥åÏó≠) - ÎèôÏùºÌïú ÏãúÍ∞ÑÌëú Í∞ÄÏ†ï
                Ïö¥ÌñâÍµ¨Í∞Ñ: [
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§Ï†Ñ", Ï∂úÏ∞®: "08:30", ÎßâÏ∞®: "10:50", Î∞∞Ï∞®Í∞ÑÍ≤©: 6 },
                    { ÏãúÍ∞ÑÎåÄ: "ÎÇÆ", Ï∂úÏ∞®: "12:00", ÎßâÏ∞®: "13:20", Î∞∞Ï∞®Í∞ÑÍ≤©: 10 },
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§ÌõÑ", Ï∂úÏ∞®: "16:55", ÎßâÏ∞®: "17:45", Î∞∞Ï∞®Í∞ÑÍ≤©: [5, 10, 15] }
                ]
            },
            3: { // ÎÖ∏ÏÑ† 3 (Ïù∏ÎçïÏõê) - ÎèôÏùºÌïú ÏãúÍ∞ÑÌëú Í∞ÄÏ†ï
                Ïö¥ÌñâÍµ¨Í∞Ñ: [
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§Ï†Ñ", Ï∂úÏ∞®: "08:30", ÎßâÏ∞®: "10:50", Î∞∞Ï∞®Í∞ÑÍ≤©: 6 },
                    { ÏãúÍ∞ÑÎåÄ: "ÎÇÆ", Ï∂úÏ∞®: "12:00", ÎßâÏ∞®: "13:20", Î∞∞Ï∞®Í∞ÑÍ≤©: 10 },
                    { ÏãúÍ∞ÑÎåÄ: "Ïò§ÌõÑ", Ï∂úÏ∞®: "16:55", ÎßâÏ∞®: "17:45", Î∞∞Ï∞®Í∞ÑÍ≤©: [5, 10, 15] }
                ]
            }
        };
        
        this.busTrackers = {
            1: { 
                id: 'BUS-KR-YS-001', 
                lat: 37.39661, 
                lng: 126.90772, 
                lastUpdate: Date.now(),
                gpsAccuracy: 2.5,
                speed: 35.0,
                satelliteCount: 12,
                Ïö¥ÌñâÏ§ë: false
            },
            2: { 
                id: 'BUS-KR-YS-002', 
                lat: 37.38945, 
                lng: 126.95123, 
                lastUpdate: Date.now(),
                gpsAccuracy: 1.8,
                speed: 28.0,
                satelliteCount: 11,
                Ïö¥ÌñâÏ§ë: false
            },
            3: { 
                id: 'BUS-KR-YS-003', 
                lat: 37.40234, 
                lng: 126.91456, 
                lastUpdate: Date.now(),
                gpsAccuracy: 3.2,
                speed: 42.0,
                satelliteCount: 10,
                Ïö¥ÌñâÏ§ë: false
            }
        };
        
        this.routeStops = {
            1: [
                { name: 'ÏïàÏñëÏó≠ Í¥ëÏû•', lat: 37.4013, lng: 126.9217, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Ìò∏Í≥ÑÎèô' },
                { name: 'Ï§ëÏïôÍ≥µÏõê', lat: 37.3954, lng: 126.9189, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ ÎπÑÏÇ∞Îèô' },
                { name: 'Î≤îÍ≥ÑÏó≠ 3Î≤àÏ∂úÍµ¨', lat: 37.3890, lng: 126.9134, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Î≤îÍ≥ÑÎèô' },
                { name: 'Ïó∞ÏÑ±ÎåÄÌïôÍµê', lat: 37.3966, lng: 126.9077, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Ï†ÑÎèô' }
            ],
            2: [
                { name: 'ÌèâÏ¥åÏó≠', lat: 37.3891, lng: 126.9513, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ ÌùîÎã¨Íµ∞' },
                { name: 'Î≤îÍ≥ÑÏó≠', lat: 37.3890, lng: 126.9134, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Î≤îÍ≥ÑÎèô' },
                { name: 'ÏãúÌù•ÏãúÏ≤≠Ïó≠', lat: 37.3645, lng: 126.9293, address: 'Í≤ΩÍ∏∞ÎèÑ ÏãúÌù•Ïãú ÏãúÌù•Îèô' },
                { name: 'Ïó∞ÏÑ±ÎåÄÌïôÍµê', lat: 37.3966, lng: 126.9077, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Ï†ÑÎèô' }
            ],
            3: [
                { name: 'Ïù∏ÎçïÏõêÏó≠', lat: 37.3794, lng: 126.9751, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Ïù∏ÎçïÏõêÎèô' },
                { name: 'ÏÑ±ÏõêÏïÑÌååÌä∏', lat: 37.3856, lng: 126.9456, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ ÌèâÏïàÎèô' },
                { name: 'Í≥ºÏ≤úÏãúÏ≤≠', lat: 37.4023, lng: 126.9145, address: 'Í≤ΩÍ∏∞ÎèÑ Í≥ºÏ≤úÏãú Ï§ëÏïôÎèô' },
                { name: 'Ïó∞ÏÑ±ÎåÄÌïôÍµê', lat: 37.3966, lng: 126.9077, address: 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏñëÏãú ÎèôÏïàÍµ¨ Ï†ÑÎèô' }
            ]
        };
        
        this.initializeGPSConnection();
    }
    
    // ÌòÑÏû¨ ÏãúÍ∞ÑÏù¥ Ïö¥ÌñâÏãúÍ∞ÑÏù∏ÏßÄ ÌôïÏù∏
    isOperatingTime(routeId) {
        const now = new Date();
        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM ÌòïÏãù
        const schedule = this.schedules[routeId];
        
        if (!schedule) return false;
        
        for (const period of schedule.Ïö¥ÌñâÍµ¨Í∞Ñ) {
            const startTime = parseInt(period.Ï∂úÏ∞®.replace(':', ''));
            const endTime = parseInt(period.ÎßâÏ∞®.replace(':', ''));
            
            if (currentTime >= startTime && currentTime <= endTime) {
                return true;
            }
        }
        
        return false;
    }
    
    // Îã§Ïùå Ïö¥ÌñâÏãúÍ∞ÑÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    getNextOperatingTime(routeId) {
        const now = new Date();
        const currentTime = now.getHours() * 100 + now.getMinutes();
        const schedule = this.schedules[routeId];
        
        if (!schedule) return null;
        
        for (const period of schedule.Ïö¥ÌñâÍµ¨Í∞Ñ) {
            const startTime = parseInt(period.Ï∂úÏ∞®.replace(':', ''));
            
            if (currentTime < startTime) {
                const hours = Math.floor(startTime / 100);
                const minutes = startTime % 100;
                const nextTime = new Date();
                nextTime.setHours(hours, minutes, 0, 0);
                
                const diffMillis = nextTime - now;
                const diffMinutes = Math.floor(diffMillis / (1000 * 60));
                
                return {
                    period: period.ÏãúÍ∞ÑÎåÄ,
                    time: period.Ï∂úÏ∞®,
                    minutesUntil: diffMinutes
                };
            }
        }
        
        // Ïò§Îäò Ïö¥Ìñâ Ï¢ÖÎ£å, ÎÇ¥Ïùº Ï≤´ Ïö¥Ìñâ ÏãúÍ∞Ñ
        const firstPeriod = schedule.Ïö¥ÌñâÍµ¨Í∞Ñ[0];
        return {
            period: `ÎÇ¥Ïùº ${firstPeriod.ÏãúÍ∞ÑÎåÄ}`,
            time: firstPeriod.Ï∂úÏ∞®,
            minutesUntil: 'N/A'
        };
    }
    
    async initializeGPSConnection() {
        console.log('üõ∞Ô∏è GPS ÏúÑÏÑ± ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ï§ë...');
        
        // WebSocketÏù¥ÎÇò Ïã§Ï†ú GPS API Ïó∞Í≤∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò
        this.gpsWebSocket = {
            connected: true,
            lastPing: Date.now()
        };
        
        // Ïã§ÏãúÍ∞Ñ GPS Îç∞Ïù¥ÌÑ∞ Ïä§Ìä∏Î¶¨Î∞ç ÏãúÏûë
        this.startGPSStreaming();
    }
    
    startGPSStreaming() {
        // Ïã§Ï†úÎ°úÎäî GPS Î™®ÎìàÏóêÏÑú NMEA 0183 ÌòïÏãùÏùò Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏò¥
        setInterval(() => {
            if (gpsConnected) {
                this.updateGPSPositions();
            }
        }, 2000); // 2Ï¥àÎßàÎã§ GPS ÏóÖÎç∞Ïù¥Ìä∏
    }
    
    updateGPSPositions() {
        // Ïã§Ï†ú GPS Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÏãúÎÆ¨Î†àÏù¥ÏÖò
        Object.keys(this.busTrackers).forEach(routeId => {
            const tracker = this.busTrackers[routeId];
            const isOperating = this.isOperatingTime(routeId);
            
            tracker.Ïö¥ÌñâÏ§ë = isOperating;
            
            if (isOperating) {
                // Ïö¥Ìñâ Ï§ëÏùº ÎïåÎßå GPS ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
                const latVariation = (Math.random() - 0.5) * 0.0005;
                const lngVariation = (Math.random() - 0.5) * 0.0005;
                
                tracker.lat += latVariation;
                tracker.lng += lngVariation;
                tracker.lastUpdate = Date.now();
                
                // GPS Ï†ïÌôïÎèÑ ÏóÖÎç∞Ïù¥Ìä∏ (1-4ÎØ∏ÌÑ∞ Ïò§Ï∞®)
                tracker.gpsAccuracy = Math.max(1.0, Math.min(4.0, 
                    tracker.gpsAccuracy + (Math.random() - 0.5) * 0.5));
                
                // ÏÜçÎèÑ ÏóÖÎç∞Ïù¥Ìä∏ (20-60km/h)
                tracker.speed = Math.max(20, Math.min(60, 
                    tracker.speed + (Math.random() - 0.5) * 5));
                
                // ÏúÑÏÑ± Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏ (10-12Í∞ú)
                tracker.satelliteCount = Math.max(10, Math.min(12, 
                    tracker.satelliteCount + Math.floor((Math.random() - 0.5) * 2)));
            } else {
                // Ïö¥Ìñâ Ï§ëÏù¥ ÏïÑÎãê ÎïåÎäî Ï∞®Í≥†ÏßÄÏóê Ï†ïÏ∞®
                tracker.speed = 0;
                tracker.lat = 37.3966; // Ïó∞ÏÑ±ÎåÄÌïôÍµê Ï†ïÎ•òÏû•
                tracker.lng = 126.9077;
            }
        });
        
        this.updateSatelliteStatus();
    }
    
    updateSatelliteStatus() {
        satelliteCount = Math.floor(Math.random() * 3) + 10;
        document.getElementById('satelliteCount').textContent = `ÏúÑÏÑ± Ïó∞Í≤∞: ${satelliteCount}/12`;
        
        const signalBars = document.querySelectorAll('.signal-bar');
        const activeCount = Math.ceil((satelliteCount / 12) * 4);
        
        signalBars.forEach((bar, index) => {
            bar.classList.toggle('active', index < activeCount);
        });
    }
    
    async getBusLocationByRoute(routeId) {
        const tracker = this.busTrackers[routeId];
        if (!tracker) return null;
        
        const isOperating = this.isOperatingTime(routeId);
        const nextOperating = this.getNextOperatingTime(routeId);
        
        if (!isOperating) {
            // Ïö¥ÌñâÏãúÍ∞ÑÏù¥ ÏïÑÎãê Îïå
            const routeStops = this.routeStops[routeId];
            const stopsWithStatus = routeStops.map((stop, index) => ({
                ...stop,
                status: 'inactive',
                arrivalTime: '--:--',
                arrivalInfo: 'ÎØ∏Ïö¥Ìñâ',
                gpsData: null
            }));
            
            return {
                routeId,
                busId: tracker.id,
                Ïö¥ÌñâÏ§ë: false,
                Îã§ÏùåÏö¥Ìñâ: nextOperating,
                stops: stopsWithStatus,
                gpsInfo: {
                    accuracy: 0,
                    speed: 0,
                    satellites: tracker.satelliteCount,
                    lastUpdate: tracker.lastUpdate
                }
            };
        }
        
        // Ïö¥Ìñâ Ï§ëÏùº ÎïåÏùò Í∏∞Ï°¥ Î°úÏßÅ
        const currentStop = this.findNearestStop(tracker.lat, tracker.lng, routeId);
        const routeStops = this.routeStops[routeId];
        
        // Í∞Å Ï†ïÎ•òÏû•Ïùò ÏÉÅÌÉú Í≥ÑÏÇ∞
        const stopsWithStatus = routeStops.map((stop, index) => {
            const distanceToCurrent = this.calculateDistance(
                tracker.lat, tracker.lng, stop.lat, stop.lng
            );
            
            let status = 'upcoming';
            let arrivalTime = 'ÏòàÏ†ï';
            let arrivalInfo = 'ÎèÑÏ∞© ÏòàÏ†ï';
            
            if (currentStop && stop.name === currentStop.name) {
                status = 'current';
                const accuracy = tracker.gpsAccuracy ? tracker.gpsAccuracy.toFixed(1) : '2.0';
                arrivalInfo = `ÌòÑÏû¨ ÏúÑÏπò (GPS: ¬±${accuracy}m Ïò§Ï∞®)`;
                arrivalTime = new Date().toLocaleTimeString('ko-KR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            } else if (currentStop && routeStops.indexOf(currentStop) > index) {
                status = 'passed';
                arrivalInfo = 'ÌÜµÍ≥ºÌï®';
                arrivalTime = new Date(Date.now() - (Math.random() * 5 + 1) * 60000)
                    .toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' });
            } else {
                // ÏòàÏÉÅ ÎèÑÏ∞© ÏãúÍ∞Ñ Í≥ÑÏÇ∞ (Í±∞Î¶¨ÏôÄ ÏÜçÎèÑ Í∏∞Î∞ò)
                const safeSpeed = tracker.speed || 30;
                const estimatedMinutes = Math.round((distanceToCurrent * 60) / safeSpeed);
                arrivalInfo = `${estimatedMinutes}Î∂Ñ ÌõÑ ÎèÑÏ∞© ÏòàÏ†ï`;
                arrivalTime = new Date(Date.now() + estimatedMinutes * 60000)
                    .toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' });
            }
            
            return {
                ...stop,
                status,
                arrivalTime,
                arrivalInfo,
                gpsData: status === 'current' ? {
                    lat: tracker.lat ? tracker.lat.toFixed(6) : '37.396610',
                    lng: tracker.lng ? tracker.lng.toFixed(6) : '126.907720',
                    accuracy: tracker.gpsAccuracy ? tracker.gpsAccuracy.toFixed(1) : '2.0',
                    speed: tracker.speed ? tracker.speed.toFixed(1) : '0.0',
                    satellites: tracker.satelliteCount || 12,
                    lastUpdate: new Date(tracker.lastUpdate).toLocaleTimeString()
                } : null
            };
        });
        
        return {
            routeId,
            busId: tracker.id,
            Ïö¥ÌñâÏ§ë: true,
            currentLocation: {
                lat: tracker.lat,
                lng: tracker.lng
            },
            stops: stopsWithStatus,
            gpsInfo: {
                accuracy: tracker.gpsAccuracy || 2.0,
                speed: tracker.speed || 0.0,
                satellites: tracker.satelliteCount || 12,
                lastUpdate: tracker.lastUpdate || Date.now()
            }
        };
    }
    
    findNearestStop(lat, lng, routeId) {
        const stops = this.routeStops[routeId];
        let nearest = null;
        let minDistance = Infinity;
        
        stops.forEach(stop => {
            const distance = this.calculateDistance(lat, lng, stop.lat, stop.lng);
            if (distance < minDistance) {
                minDistance = distance;
                nearest = { ...stop, distance };
            }
        });
        
        return nearest;
    }
    
    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // ÏßÄÍµ¨ Î∞òÏßÄÎ¶Ñ (km)
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = 
            Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }
    
    // GPS Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
    checkGPSConnection() {
        const now = Date.now();
        const timeSinceLastUpdate = Object.values(this.busTrackers)
            .map(tracker => now - tracker.lastUpdate);
        const maxDelay = Math.max(...timeSinceLastUpdate);
        
        if (maxDelay > 10000) { // 10Ï¥à Ïù¥ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ ÏóÜÏùå
            gpsConnected = false;
            this.updateConnectionStatus('disconnected');
        } else if (maxDelay > 5000) { // 5Ï¥à Ïù¥ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ ÏóÜÏùå
            this.updateConnectionStatus('reconnecting');
        } else {
            gpsConnected = true;
            this.updateConnectionStatus('connected');
        }
    }
    
    updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        const statusTexts = {
            connected: 'GPS Ïó∞Í≤∞Îê®',
            reconnecting: 'Ïû¨Ïó∞Í≤∞ Ï§ë...',
            disconnected: 'GPS Ïó∞Í≤∞ ÎÅäÍπÄ'
        };
        
        statusElement.textContent = statusTexts[status];
        statusElement.className = `connection-status ${status}`;
        
        document.getElementById('statusText').textContent = 
            gpsConnected ? 'GPS Ï∂îÏ†Å Ï§ë' : 'GPS Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë';
    }
}

// GPS Ï∂îÏ†Å ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
const tracker = new SatelliteShuttleTracker();

// ÎÖ∏ÏÑ† Ï†ÑÌôò Ìï®Ïàò
function switchRoute(routeNumber) {
    currentRoute = routeNumber;
    
    // ÌÉ≠ ÌôúÏÑ±Ìôî ÏÉÅÌÉú Î≥ÄÍ≤Ω
    document.querySelectorAll('.route-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.route-tab')[routeNumber - 1].classList.add('active');
    
    // ÎÖ∏ÏÑ† Ïª®ÌÖåÏù¥ÎÑà ÌëúÏãú/Ïà®ÍπÄ
    document.querySelectorAll('.bus-route').forEach(route => {
        route.style.display = 'none';
    });
    document.getElementById(`busRoute${routeNumber}`).style.display = 'block';
    
    // ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
    updateBusLocation();
}

// Î≤ÑÏä§ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
async function updateBusLocation() {
    try {
        const updateElement = document.getElementById('lastUpdate');
        const now = new Date();
        const timeString = now.toLocaleTimeString('ko-KR', { 
            hour: '2-digit', 
            minute: '2-digit',
            second: '2-digit'
        });
        
        updateElement.textContent = `ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏: ${timeString}`;
        
        // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº ÌöåÏ†Ñ Ïï†ÎãàÎ©îÏù¥ÏÖò
        const refreshBtn = document.querySelector('.refresh-button');
        if (refreshBtn) {
            refreshBtn.style.transform = 'rotate(360deg)';
            setTimeout(() => {
                refreshBtn.style.transform = 'rotate(0deg)';
            }, 300);
        }
        
        // GPS Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏò§Í∏∞
        const busData = await tracker.getBusLocationByRoute(currentRoute);
        if (busData && busData.stops) {
            updateBusRoute(busData);
        } else {
            console.warn('GPS Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏò¨ Ïàò ÏóÜÏäµÎãàÎã§:', busData);
        }
        
        // GPS Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
        tracker.checkGPSConnection();
        
    } catch (error) {
        console.error('GPS ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
        
        // ÏóêÎü¨ Î∞úÏÉùÏãú Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º disconnectedÎ°ú Î≥ÄÍ≤Ω
        tracker.updateConnectionStatus('disconnected');
        
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏóêÎü¨ ÏïåÎ¶º (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        const statusText = document.getElementById('statusText');
        if (statusText) {
            statusText.textContent = 'GPS Ïó∞Í≤∞ Ïò§Î•ò Î∞úÏÉù';
            statusText.style.color = '#f44336';
        }
    }
}

// Î≤ÑÏä§ ÎÖ∏ÏÑ† UI ÏóÖÎç∞Ïù¥Ìä∏
function updateBusRoute(busData) {
    try {
        const routeContainer = document.getElementById(`busRoute${busData.routeId}`);
        if (!routeContainer) {
            console.error(`ÎÖ∏ÏÑ† ${busData.routeId} Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
            return;
        }
        
        routeContainer.innerHTML = '';
        
        // Ïö¥Ìñâ Ï§ëÏù¥ ÏïÑÎãê Îïå ÏïàÎÇ¥ Î©îÏãúÏßÄ ÌëúÏãú
        if (!busData.Ïö¥ÌñâÏ§ë) {
            const noticeDiv = document.createElement('div');
            noticeDiv.className = 'non-operating-notice';
            
            let nextOperatingText = '';
            if (busData.Îã§ÏùåÏö¥Ìñâ) {
                if (busData.Îã§ÏùåÏö¥Ìñâ.minutesUntil !== 'N/A') {
                    nextOperatingText = `<div class="next-operating-time">
                        Îã§Ïùå Ïö¥Ìñâ: ${busData.Îã§ÏùåÏö¥Ìñâ.period} ${busData.Îã§ÏùåÏö¥Ìñâ.time}
                        (${busData.Îã§ÏùåÏö¥Ìñâ.minutesUntil}Î∂Ñ ÌõÑ)
                    </div>`;
                } else {
                    nextOperatingText = `<div class="next-operating-time">
                        Îã§Ïùå Ïö¥Ìñâ: ${busData.Îã§ÏùåÏö¥Ìñâ.period} ${busData.Îã§ÏùåÏö¥Ìñâ.time}
                    </div>`;
                }
            }
            
            noticeDiv.innerHTML = `
                <h3>üöå ÌòÑÏû¨ ÎØ∏Ïö¥Ìñâ ÏãúÍ∞Ñ</h3>
                <p>ÏÖîÌãÄÎ≤ÑÏä§Í∞Ä Ïö¥ÌñâÌïòÏßÄ ÏïäÎäî ÏãúÍ∞ÑÏûÖÎãàÎã§.</p>
                ${nextOperatingText}
                <small style="display: block; margin-top: 10px; color: #666;">
                    Ïö¥ÌñâÏãúÍ∞Ñ: Ïò§Ï†Ñ 6Î∂ÑÍ∞ÑÍ≤©, ÎÇÆ 10Î∂ÑÍ∞ÑÍ≤©, Ïò§ÌõÑ 5Î∂Ñ/10Î∂Ñ/15Î∂ÑÍ∞ÑÍ≤©
                </small>
            `;
            
            routeContainer.appendChild(noticeDiv);
        }
        
        if (!busData.stops || !Array.isArray(busData.stops)) {
            console.error('Ï†ïÎ•òÏû• Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§:', busData);
            return;
        }
        
        busData.stops.forEach((stop, index) => {
            if (!stop || !stop.name) {
                console.warn('ÏûòÎ™ªÎêú Ï†ïÎ•òÏû• Îç∞Ïù¥ÌÑ∞:', stop);
                return;
            }
            
            const stopElement = document.createElement('div');
            stopElement.className = 'bus-stop';
            stopElement.style.animationDelay = `${index * 0.1}s`;
            
            // ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í Ï≤òÎ¶¨
            const arrivalTime = stop.arrivalTime || '--:--';
            const arrivalInfo = stop.arrivalInfo || 'Ï†ïÎ≥¥ ÏóÜÏùå';
            const status = stop.status || 'upcoming';
            
            stopElement.innerHTML = `
                <div class="stop-marker ${status}"></div>
                ${status === 'current' ? '<div class="bus-icon">üöå</div>' : ''}
                <div class="stop-info ${status}">
                    <div class="stop-name">${stop.name}</div>
                    <div class="stop-time">${arrivalTime}</div>
                    <div class="arrival-info ${status}">${arrivalInfo}</div>
                    ${stop.gpsData ? `
                        <div class="gps-info">
                            <div class="gps-coordinates">
                                GPS: ${stop.gpsData.lat || 'N/A'}, ${stop.gpsData.lng || 'N/A'}
                            </div>
                            <div class="gps-accuracy">
                                Ï†ïÌôïÎèÑ: ¬±${stop.gpsData.accuracy || 'N/A'}m | 
                                ÏÜçÎèÑ: ${stop.gpsData.speed || '0'}km/h | 
                                ÏúÑÏÑ±: ${stop.gpsData.satellites || 'N/A'}Í∞ú
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
            
            // ÌòÑÏû¨ ÏúÑÏπò ÌÅ¥Î¶≠Ïãú GPS ÏÉÅÏÑ∏ Î™®Îã¨ ÌëúÏãú
            if (status === 'current' && busData.Ïö¥ÌñâÏ§ë) {
                stopElement.addEventListener('click', () => {
                    showGPSModal(busData);
                });
                stopElement.style.cursor = 'pointer';
            }
            
            routeContainer.appendChild(stopElement);
        });
        
        // ÏÉÅÌÉúÎ∞î ÏóÖÎç∞Ïù¥Ìä∏
        const statusText = document.getElementById('statusText');
        if (statusText) {
            statusText.textContent = busData.Ïö¥ÌñâÏ§ë ? 'GPS Ï∂îÏ†Å Ï§ë' : 'ÎØ∏Ïö¥Ìñâ ÏãúÍ∞Ñ';
            statusText.style.color = busData.Ïö¥ÌñâÏ§ë ? '#333' : '#999';
        }
        
    } catch (error) {
        console.error('Î≤ÑÏä§ ÎÖ∏ÏÑ† ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
    }
}

// GPS ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î™®Îã¨ ÌëúÏãú
function showGPSModal(busData) {
    const modal = document.getElementById('gpsModal');
    const overlay = document.getElementById('modalOverlay');
    const detailsDiv = document.getElementById('gpsDetails');
    
    const currentStop = busData.stops.find(stop => stop.status === 'current');
    
    detailsDiv.innerHTML = `
        <div style="margin-bottom: 15px;">
            <strong>üöå Î≤ÑÏä§ ID:</strong> ${busData.busId}<br>
            <strong>üìç ÌòÑÏû¨ ÏúÑÏπò:</strong> ${currentStop.name}<br>
            <strong>üìç Ï£ºÏÜå:</strong> ${currentStop.address}
        </div>
        <div style="background: #f9f9f9; padding: 10px; border-radius: 6px; margin-bottom: 15px;">
            <strong>üõ∞Ô∏è GPS Ï†ïÎ≥¥:</strong><br>
            ÏúÑÎèÑ: ${currentStop.gpsData.lat}<br>
            Í≤ΩÎèÑ: ${currentStop.gpsData.lng}<br>
            Ï†ïÌôïÎèÑ: ¬±${currentStop.gpsData.accuracy}m<br>
            ÏÜçÎèÑ: ${currentStop.gpsData.speed}km/h<br>
            Ïó∞Í≤∞Îêú ÏúÑÏÑ±: ${currentStop.gpsData.satellites}Í∞ú<br>
            ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: ${currentStop.gpsData.lastUpdate}
        </div>
        <div style="font-size: 12px; color: #666;">
            * GPS ÏúÑÏπòÎäî ÏúÑÏÑ± Ïã†Ìò∏Î•º ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï∂îÏ†ÅÎê©ÎãàÎã§.<br>
            * Ï†ïÌôïÎèÑÎäî ÎÇ†Ïî®, Í±¥Î¨º Îì± Ï£ºÎ≥Ä ÌôòÍ≤ΩÏóê Îî∞Îùº Îã¨ÎùºÏßà Ïàò ÏûàÏäµÎãàÎã§.
        </div>
    `;
    
    modal.classList.add('show');
    overlay.classList.add('show');
}

// GPS Î™®Îã¨ Îã´Í∏∞
function closeGPSModal() {
    document.getElementById('gpsModal').classList.remove('show');
    document.getElementById('modalOverlay').classList.remove('show');
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    console.log('üõ∞Ô∏è Ïó∞ÏÑ±ÎåÄÌïôÍµê GPS ÏÖîÌãÄÎ≤ÑÏä§ ÏãúÏä§ÌÖú ÏãúÏûë');
    
    // Ï¥àÍ∏∞ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
    updateBusLocation();
    
    // 2Ï¥àÎßàÎã§ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
    updateInterval = setInterval(updateBusLocation, 2000);
    
    // GPS Ïó∞Í≤∞ ÏÉÅÌÉú 1Ï¥àÎßàÎã§ ÌôïÏù∏
    setInterval(() => {
        tracker.checkGPSConnection();
    }, 1000);
    
    // Î™®Îã¨ Ïò§Î≤ÑÎ†àÏù¥ ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
    document.getElementById('modalOverlay').addEventListener('click', closeGPSModal);
});

// Í∞úÎ∞úÏûê ÎèÑÍµ¨Ïö© ÎîîÎ≤ÑÍπÖ Ìï®Ïàò
window.gpsDebug = {
    getCurrentLocation: () => tracker.getBusLocationByRoute(currentRoute),
    simulateGPSLoss: () => {
        gpsConnected = false;
        tracker.updateConnectionStatus('disconnected');
    },
    restoreGPS: () => {
        gpsConnected = true;
        tracker.updateConnectionStatus('connected');
    },
    getBusTracker: (routeId) => tracker.busTrackers[routeId],
    getAllTrackers: () => tracker.busTrackers
};
